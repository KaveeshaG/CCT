package Compleity;

import menu.Load_class;
import Weight_structre.Cuppling_weight;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author PK
 */
public class cuppling extends javax.swing.JFrame {

    /**
     * Creates new form cuppling
     */
    public cuppling() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        total = new javax.swing.JLabel();
        total1 = new javax.swing.JLabel();
        total2 = new javax.swing.JLabel();
        total3 = new javax.swing.JLabel();
        total4 = new javax.swing.JLabel();
        total5 = new javax.swing.JLabel();
        total6 = new javax.swing.JLabel();
        total7 = new javax.swing.JLabel();
        total8 = new javax.swing.JLabel();
        total9 = new javax.swing.JLabel();
        total10 = new javax.swing.JLabel();
        total11 = new javax.swing.JLabel();
        total12 = new javax.swing.JLabel();
        total13 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 255, 255));

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Line No", "Program Statements", "Nr", "Nmcms", "Nmcmd", "Nmcrms", "Nmcrmd", "Nrmcrms", "Nrmcrmd", "Nrmcms", "Nrmcmd", "Nmrgvs", "Nmrgvd", "Nrmrgvs", "Nrmrgvd", "Ccp"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.setColumnSelectionAllowed(true);
        jTable3.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(jTable3);
        jTable3.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setMinWidth(20);
            jTable3.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable3.getColumnModel().getColumn(0).setMaxWidth(20);
            jTable3.getColumnModel().getColumn(2).setMinWidth(60);
            jTable3.getColumnModel().getColumn(2).setPreferredWidth(60);
            jTable3.getColumnModel().getColumn(2).setMaxWidth(60);
            jTable3.getColumnModel().getColumn(3).setMinWidth(60);
            jTable3.getColumnModel().getColumn(3).setPreferredWidth(60);
            jTable3.getColumnModel().getColumn(3).setMaxWidth(60);
            jTable3.getColumnModel().getColumn(4).setMinWidth(60);
            jTable3.getColumnModel().getColumn(4).setPreferredWidth(60);
            jTable3.getColumnModel().getColumn(4).setMaxWidth(60);
            jTable3.getColumnModel().getColumn(5).setMinWidth(60);
            jTable3.getColumnModel().getColumn(5).setPreferredWidth(60);
            jTable3.getColumnModel().getColumn(5).setMaxWidth(60);
            jTable3.getColumnModel().getColumn(6).setMinWidth(60);
            jTable3.getColumnModel().getColumn(6).setPreferredWidth(60);
            jTable3.getColumnModel().getColumn(6).setMaxWidth(60);
            jTable3.getColumnModel().getColumn(7).setMinWidth(60);
            jTable3.getColumnModel().getColumn(7).setPreferredWidth(60);
            jTable3.getColumnModel().getColumn(7).setMaxWidth(60);
            jTable3.getColumnModel().getColumn(8).setMinWidth(60);
            jTable3.getColumnModel().getColumn(8).setPreferredWidth(60);
            jTable3.getColumnModel().getColumn(8).setMaxWidth(60);
            jTable3.getColumnModel().getColumn(9).setMinWidth(60);
            jTable3.getColumnModel().getColumn(9).setPreferredWidth(60);
            jTable3.getColumnModel().getColumn(9).setMaxWidth(60);
            jTable3.getColumnModel().getColumn(10).setMinWidth(60);
            jTable3.getColumnModel().getColumn(10).setPreferredWidth(60);
            jTable3.getColumnModel().getColumn(10).setMaxWidth(60);
            jTable3.getColumnModel().getColumn(11).setMinWidth(60);
            jTable3.getColumnModel().getColumn(11).setPreferredWidth(60);
            jTable3.getColumnModel().getColumn(11).setMaxWidth(60);
            jTable3.getColumnModel().getColumn(12).setMinWidth(60);
            jTable3.getColumnModel().getColumn(12).setPreferredWidth(60);
            jTable3.getColumnModel().getColumn(12).setMaxWidth(60);
            jTable3.getColumnModel().getColumn(13).setMinWidth(60);
            jTable3.getColumnModel().getColumn(13).setPreferredWidth(60);
            jTable3.getColumnModel().getColumn(13).setMaxWidth(60);
            jTable3.getColumnModel().getColumn(14).setMinWidth(60);
            jTable3.getColumnModel().getColumn(14).setPreferredWidth(60);
            jTable3.getColumnModel().getColumn(14).setMaxWidth(60);
            jTable3.getColumnModel().getColumn(15).setMinWidth(60);
            jTable3.getColumnModel().getColumn(15).setPreferredWidth(60);
            jTable3.getColumnModel().getColumn(15).setMaxWidth(60);
        }

        total.setBackground(new java.awt.Color(255, 255, 255));
        total.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total.setText("   ");
        total.setOpaque(true);

        total1.setBackground(new java.awt.Color(255, 255, 255));
        total1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total1.setText("   ");
        total1.setOpaque(true);

        total2.setBackground(new java.awt.Color(255, 255, 255));
        total2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total2.setText("   ");
        total2.setOpaque(true);

        total3.setBackground(new java.awt.Color(255, 255, 255));
        total3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total3.setText("   ");
        total3.setOpaque(true);

        total4.setBackground(new java.awt.Color(255, 255, 255));
        total4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total4.setText("   ");
        total4.setOpaque(true);

        total5.setBackground(new java.awt.Color(255, 255, 255));
        total5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total5.setText("   ");
        total5.setOpaque(true);

        total6.setBackground(new java.awt.Color(255, 255, 255));
        total6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total6.setText("   ");
        total6.setOpaque(true);

        total7.setBackground(new java.awt.Color(255, 255, 255));
        total7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total7.setText("   ");
        total7.setOpaque(true);

        total8.setBackground(new java.awt.Color(255, 255, 255));
        total8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total8.setText("   ");
        total8.setOpaque(true);

        total9.setBackground(new java.awt.Color(255, 255, 255));
        total9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total9.setText("   ");
        total9.setOpaque(true);

        total10.setBackground(new java.awt.Color(255, 255, 255));
        total10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total10.setText("   ");
        total10.setOpaque(true);

        total11.setBackground(new java.awt.Color(255, 255, 255));
        total11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total11.setText("   ");
        total11.setOpaque(true);

        total12.setBackground(new java.awt.Color(255, 255, 255));
        total12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total12.setText("   ");
        total12.setOpaque(true);

        total13.setBackground(new java.awt.Color(255, 255, 255));
        total13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total13.setText("   ");
        total13.setOpaque(true);

        jButton1.setText("Weight Related To coupling Factor");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total2, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total4, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(total13, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(total9, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(total10, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(total11, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(total5, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(total6, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(total3, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(total12, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(total7, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(total8, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 155, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(total8))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(total9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(total10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(total11)
                                    .addComponent(total3)
                                    .addComponent(total12)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(total5)
                                    .addComponent(total7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(total6))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(total)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(total1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(total2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(total4)
                                    .addComponent(total13))))
                        .addGap(0, 18, Short.MAX_VALUE))))
        );

        jLabel2.setFont(new java.awt.Font("Poppins", 1, 24)); // NOI18N
        jLabel2.setText("Coupling Complexity");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logo.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Cuppling_weight cp = new Cuppling_weight(this, true);
        cp.setVisible(true);

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cuppling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cuppling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cuppling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cuppling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cuppling().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    public static javax.swing.JTable jTable3;
    public static javax.swing.JLabel total;
    public static javax.swing.JLabel total1;
    public static javax.swing.JLabel total10;
    public static javax.swing.JLabel total11;
    public static javax.swing.JLabel total12;
    public static javax.swing.JLabel total13;
    public static javax.swing.JLabel total2;
    public static javax.swing.JLabel total3;
    public static javax.swing.JLabel total4;
    public static javax.swing.JLabel total5;
    public static javax.swing.JLabel total6;
    public static javax.swing.JLabel total7;
    public static javax.swing.JLabel total8;
    public static javax.swing.JLabel total9;
    // End of variables declaration//GEN-END:variables

    static ArrayList<ArrayList> List_data = new ArrayList();
    static ArrayList<ArrayList> ld = new ArrayList();

    static public String replaceWithPattern(String str, String replace) {

        Pattern ptn = Pattern.compile("\\s+");
        Matcher mtch = ptn.matcher(str);
        return mtch.replaceAll(replace);
    }

    public static void filter() {

        DefaultTableModel df3 = (DefaultTableModel) jTable3.getModel();
        df3.setRowCount(0);

        String methods[] = {"public", "private", "protected"};
        String Pri_dta_typs[] = {"byte[]",
            "short[]",
            "int[]",
            "long[]",
            "float[]",
            "double[]",
            "boolean[]",
            "char[]",
            "String[]",
            "Object[]",
            "byte",
            "short",
            "int",
            "long",
            "float",
            "double",
            "boolean",
            "char",
            "String",
            "Object",
            "Dimension"};
        String s[] = Load_class.jTextArea1.getText().split("\\n");
        ArrayList<String> global_variable = new ArrayList<>();
        Map<String, String> calsssa = new HashMap<String, String>();

        int last = 0;
        int count = 0;

        int scope_count = 0;
        String class_name = "";
        String method_name = "";

        for (String line3 : s) {

            if (line3.trim().equals("")) {

            } else {

                String line2 = line3;

                String line = replaceWithPattern(line3, " ");

                String comnt_remove[] = line.split("");
                String new_line = "";

                int dublecode = 0;
                for (int i = 0; i < comnt_remove.length; i++) {

                    if (comnt_remove[i].equals("/") && comnt_remove[i + 1].equals("/")) {
                        break;
                    } else if (comnt_remove[i].equals("\"")) {
                        dublecode++;
                    } else if (dublecode % 2 == 0) {
                        new_line = new_line + comnt_remove[i];
                    }

                }

                line = new_line;

                int class_line = 0;
                int method_line = 0;

                if (line.contains("{")) {
                    scope_count++;
                }
                if (line.contains("}")) {
                    scope_count--;
                    if (scope_count == 0) {
                        class_name = "";
                    }
                    if (scope_count == 1) {
                        method_name = "";
                    }
                }

                String class_lines[] = line.split(" ");

                for (int i = 0; i < class_lines.length; i++) {

                    if (class_lines[i].equals("class")) {

                        if (line.contains(" extends ")) {

                            String first[] = line.split("extends")[0].split("");
                            int space = 0;

                            for (int j = first.length - 1; j > 0; j--) {

                                if (space == 1 && (first[j].equals(" "))) {
                                    break;
                                } else if (!(first[j].equals(" "))) {
                                    space = 1;
                                    class_name = first[j] + class_name;
                                }

                            }
                            class_line = 1;
                            method_line = 0;

                            ArrayList data_array = new ArrayList();

                            data_array.add(line2);
                            data_array.add(class_name);
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            List_data.add(data_array);
                            calsssa.put(class_name, "");

                            break;
                        } else {
                            String first[] = line.split("[{]")[0].split("");
                            int space = 0;

                            for (int j = first.length - 1; j > 0; j--) {

                                if (space == 1 && (first[j].equals(" "))) {
                                    break;
                                } else if (!(first[j].equals(" "))) {
                                    space = 1;
                                    class_name = first[j] + class_name;
                                }

                            }
                            class_line = 1;
                            method_line = 0;

                            ArrayList data_array = new ArrayList();
                            data_array.add(line2);
                            data_array.add(class_name);
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            List_data.add(data_array);
                            calsssa.put(class_name, "");
                            break;
                        }

                    }
                }

                if (class_line == 1) {

                } else {

                    for (String method : methods) {

                        if (line.contains(method) && line.contains("(")) {

                            String first[] = line.split("[(]")[0].split("");
                            int space = 0;

                            for (int i = first.length - 1; i > 0; i--) {

                                if (space == 1 && (first[i].equals(" "))) {
                                    break;
                                } else if (!(first[i].equals(" "))) {
                                    space = 1;
                                    method_name = first[i] + method_name;
                                }

                            }
                            ArrayList data_array = new ArrayList();
                            data_array.add(line2);
                            data_array.add(class_name);
                            data_array.add("");
                            data_array.add(method_name);
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            List_data.add(data_array);
                            method_line = 1;

                            ArrayList va  = new ArrayList();
                            va.add(class_name);
                            va.add(method_name);
                            ld.add(va);
                        }
                    }

                }

                if (method_line == 1 || class_line == 1) {

                } else {

                    if (scope_count == 1) {

                    
                        String variable_name = "";
                        for (String Pri_dta_typ : Pri_dta_typs) {

                            if (line.contains(Pri_dta_typ + " ")) {

                                String newline[] = line.split(Pri_dta_typ);
                                String variablle[] = newline[1].split("");

                                for (int i = 0; i < variablle.length; i++) {

                                    if (variablle[i].equals(";") || variablle[i].equals("=")) {
                                        break;
                                    } else {

                                        variable_name = variable_name + variablle[i];

                                    }
                                }

                                variable_name = variable_name.replaceAll(" ", "");

                                if (variable_name.equals("")) {

                                } else {

                                    if (variable_name.contains(",")) {
                                        String name[] = variable_name.split(",");
                                        for (int i = 0; i < name.length; i++) {

                                            global_variable.add(name[i] + "-" + class_name);
                                        }
                                    } else {
                                        global_variable.add(variable_name + "-" + class_name);

                                    }

                                }

                            }
                        }
                        ArrayList data_array = new ArrayList();
                        data_array.add(line2);
                        data_array.add(class_name);
                        data_array.add(variable_name);
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        List_data.add(data_array);

                    } else if (scope_count > 1) {

                      
                        String methods_in_line = "";
                        if (line.contains("(") && line.contains(")")) {

                            line = line.replaceAll(" " + "[(]", "(");

                            String method_call[] = line.split("");

                            for (int i = 0; i < method_call.length; i++) {

                                if (method_call[i].toString().equals("(")) {
                                    String Called_method_name = "";
                                    int space = 0;

                                    for (int j = i; j > 0; j--) {

                                        if (space == 1 && (method_call[j].equals(" ") || (method_call[j].equals("(")) || (method_call[j].equals(")")) || (method_call[j].equals(".")) || (method_call[j].equals(",")))) {

                                            break;
                                        } else if (!(method_call[j].equals(" ")) || (method_call[j].equals("(")) || (method_call[j].equals(")")) || (method_call[j].equals(".")) || (method_call[j].equals(","))) {
                                            space = 1;
                                            Called_method_name = method_call[j] + Called_method_name;
                                        }

                                    }

                                    if (line.contains("new " + Called_method_name + ")")) {

                                    } else {
                                        if (!(Called_method_name.equals("("))) {

                                            int include_operator = 0;

                                            String operators[] = {" ",
                                                ",",
                                                "+",
                                                "-",
                                                "*",
                                                "/",
                                                "%",
                                                "++",
                                                "--",
                                                "=",
                                                "+=",
                                                "-=",
                                                "*=",
                                                "/=",
                                                "%=",
                                                "&=",
                                                "|=",
                                                "^=",
                                                ">>=",
                                                "<<=",
                                                "==",
                                                "!=",
                                                ">",
                                                "<",
                                                ">=",
                                                "<=",
                                                "&&",
                                                "||",
                                                "!",
                                                ">>>=",
                                                "^",
                                                "~",
                                                "<<",
                                                ">>",
                                                ">>>",
                                                "<<<",
                                                ",",
                                                "_>",
                                                ".",
                                                "::"};
                                            String controllers[] = {"if",
                                                "while",
                                                "switch"};

                                            for (String operator : operators) {

                                                if (Called_method_name.contains(operator)) {
                                                    include_operator = 1;
                                                }
                                            }

                                            for (String cntrl : controllers) {

                                                String x = Called_method_name.replaceAll("[(]", "");
                                                if (x.equals(cntrl)) {
                                                    include_operator = 1;
                                                }
                                            }

                                            if (include_operator == 0) {

                                                Called_method_name = Called_method_name + ")";

                                                if (Called_method_name.equals("for()") || Called_method_name.equals("println()") || Called_method_name.equals("print()")) {

                                                } else {
                                                    if (methods_in_line.trim().isEmpty()) {
                                                        methods_in_line = Called_method_name;
                                                    } else {

                                                        methods_in_line = methods_in_line + "," + Called_method_name;

                                                    }
                                                }

                                            }

                                        }
                                    }

                                }

                            }

                        }

                        int if_variable_exist = 0;
                        for (String Pri_dta_typ : Pri_dta_typs) {

                            if (line.contains(Pri_dta_typ + " ")) {

                                String newline[] = line.split(Pri_dta_typ);
                                String variablle[] = newline[1].split("");
                                String variable_name = "";

                                for (int i = 0; i < variablle.length; i++) {

                                    if ((variablle[i].equals(" "))) {
                                        if (variable_name.trim().isEmpty()) {

                                        } else {
                                            break;
                                        }
                                    } else if (variablle[i].equals(";") || variablle[i].equals("=")) {
                                        break;
                                    } else {
                                        variable_name = variable_name + variablle[i];

                                    }
                                }

                                ArrayList Data_array = new ArrayList();
                                Data_array.add(line2);
                                Data_array.add(class_name);
                                Data_array.add("");
                                Data_array.add(method_name);
                                Data_array.add("");
                                Data_array.add(methods_in_line);
                                Data_array.add(variable_name);
                                Data_array.add("");
                                Data_array.add("");
                                Data_array.add("");
                                Data_array.add("");
                                Data_array.add("");
                                Data_array.add("");
                                Data_array.add("");
                                Data_array.add("");
                                Data_array.add("");
                                Data_array.add("");
                                Data_array.add("");
                                Data_array.add("");
                                Data_array.add("");
                                Data_array.add("");
                                Data_array.add("");
                                List_data.add(Data_array);
                                if_variable_exist = 1;

                            }
                        }
                        if (if_variable_exist == 0) {

                            ArrayList data_array = new ArrayList();
                            data_array.add(line2);
                            data_array.add(class_name);
                            data_array.add("");
                            data_array.add(method_name);
                            data_array.add("");
                            data_array.add(methods_in_line);
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            data_array.add("");
                            List_data.add(data_array);
                        }
                    } else {

                        ArrayList data_array = new ArrayList();
                        data_array.add(line2);
                        data_array.add(class_name);
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        data_array.add("");
                        List_data.add(data_array);

                    }

                }

            }
        }

        for (int i = 0; i < List_data.size(); i++) {

            ArrayList d = List_data.get(i);
            String line = d.get(0).toString();

            for (Map.Entry<String, String> entry : calsssa.entrySet()) {
                String calss_name = entry.getKey();

                String asd = "new " + calss_name + "();";
                if (line.contains(asd)) {

                    String first[] = line.split("new ")[0].split("");
                    int space = 0;
                    int eql = 0;
                    String classcall = "";
                    for (int f = first.length - 1; f > 0; f--) {

                        if ((first[f].equals("="))) {
                            eql = 1;

                        } else if (space == 1 && eql == 1 && (first[f].equals(" "))) {
                            break;
                        } else if (!(first[f].equals(" "))) {
                            space = 1;
                            classcall = first[f] + classcall;
                        }

                    }
                    d.set(7, class_name);;
                    d.set(8, classcall);

                    break;
                }

            }

            String type = "Regular";
            String now_mwthod = d.get(3).toString();

            if (!(now_mwthod.equals(""))) {

                for (int i2 = 0; i2 < List_data.size(); i2++) {
                    ArrayList d1 = List_data.get(i2);
                    String method = d1.get(3).toString();

                    if (method.equals(now_mwthod)) {

                        String Calls[] = d1.get(5).toString().split(",");

                        for (String Call : Calls) {

                            Call = Call.replaceAll("[(]", "");
                            Call = Call.replaceAll("[)]", "");

                            if (Call.equals(method)) {
                                type = "Recursive";
                                break;
                            }

                        }

                    }
                }
                d.set(4, type);

            }
        }

        for (int i = 0; i < List_data.size(); i++) {
            ArrayList d2 = List_data.get(i);
            String line = d2.get(0).toString();
            String classname = d2.get(7).toString();
            String called_methods = d2.get(5).toString();
            String classvariable = d2.get(8).toString();
            String method = "";
            if (!(classname.equals(""))) {

                method = d2.get(3).toString();

                for (int j = 0; j < List_data.size(); j++) {
                    ArrayList d3 = List_data.get(j);
                    String line2 = d3.get(0).toString();
                    if (d3.get(3).equals(method)) {

                        for (Map.Entry<String, String> entry : calsssa.entrySet()) {
                            String key = entry.getKey();
                            String val = entry.getValue();

                            for (int ja = 0; ja < ld.size(); ja++) {
                                ArrayList lda = ld.get(ja);

                                if (key.equals(lda.get(0).toString())) {
                                    val = lda.get(1).toString();

                                    if (key.equals(classname)) {

                                        String method_call0 = classname + "." + val + "(";
                                        String method_call = classvariable + "." + val + "(";
                                        String method_call2 = val + "()";
                                        if (line2.replaceAll(" ", "").contains(method_call) || line2.replaceAll(" ", "").contains(method_call0)) {

                                            String old[] = d3.get(5).toString().split(",");
                                            String newv = "";

                                            for (int k = 0; k < old.length; k++) {

                                                if (old[k].equals(method_call2)) {

                                                } else {
                                                    newv = newv + old[k];
                                                }
                                            }
                                            d3.set(5, newv);
                                            d3.set(9, method_call2);

                                        }
                                    }
                                }
                            }

                        }

                    }
                }

            } else if (!(called_methods.equals(""))) {

                for (Map.Entry<String, String> entry : calsssa.entrySet()) {
                    String key = entry.getKey();
                    String val = entry.getValue();

                    for (int j = 0; j < ld.size(); j++) {
                        ArrayList lda1 = ld.get(j);
                        if (key.equals(lda1.get(0).toString())) {
                            val = lda1.get(1).toString();

                            String method_call0 = key + "." + val + "(";

                            String method_call2 = val + "()";
                            if (line.replaceAll(" ", "").contains(method_call0)) {

                                String old[] = d2.get(5).toString().split(",");
                                String newv = "";

                                for (int k = 0; k < old.length; k++) {

                                    if (old[k].equals(method_call2)) {

                                    } else {
                                        newv = newv + old[k];
                                    }
                                }
                                d2.set(7, key);

                                if (d2.get(1).equals(key)) {

                                } else {
                                    d2.set(5, newv);
                                    d2.set(9, method_call2);

                                }

                            }

                        }
                    }

                }

            }

        }

        for (int j = 0; j < List_data.size(); j++) {
            ArrayList d4 = List_data.get(j);
            String recmethods = d4.get(4).toString();
            String objname1 = d4.get(3).toString();
            String objname2 = "";

            if (recmethods.equals("Recursive")) {
                String recmethodname = d4.get(3).toString();

                for (int i = 0; i < List_data.size(); i++) {
                    ArrayList d5 = List_data.get(i);
                    int x = 0;
                    int y = 0;
                    String allmethods[] = d5.get(5).toString().split(",");

                    for (String allmethod : allmethods) {

                        objname2 = d5.get(3).toString();

                        if (allmethod.equals(recmethodname + "()") && objname1.equals(objname2)) {
                            y++;
                        } else if (allmethod.equals(recmethodname + "()")) {
                            x++;
                        }
                    }

                    if (x == 0) {
                    } else {
                        d5.set(10, x);

                    }

                    if (y == 0) {
                    } else {
                        d5.set(11, y);

                    }

                }

            }
        }

        for (int j = 0; j < List_data.size(); j++) {
            ArrayList dj6 = List_data.get(j);
            String recmethods = dj6.get(4).toString();

            String objname2 = "";

            if (recmethods.equals("Recursive")) {
                String recmethodname = dj6.get(3).toString();

                for (int i = 0; i < List_data.size(); i++) {
                    ArrayList d7i = List_data.get(i);
                    int x = 0;
                    int y = 0;

                    String allmethods[] = d7i.get(9).toString().split(",");

                    for (String allmethod : allmethods) {

                        objname2 = d7i.get(9).toString();

                        if (allmethod.equals(recmethodname + "()") && d7i.get(4).toString().equals("Recursive")) {
                            y++;
                        } else if (allmethod.equals(recmethodname + "()")) {
                            x++;
                        }
                    }

                    if (x == 0) {
                    } else {
                        d7i.set(12, x);

                    }

                    if (y == 0) {
                    } else {
                        d7i.set(13, y);

                    }

                }

            }
        }

        for (int j = 0; j < List_data.size(); j++) {
            ArrayList d8j = List_data.get(j);
            String method = d8j.get(5).toString();
            System.out.println("method:" + method);
            String method_diff = d8j.get(9).toString();
            String method_type = d8j.get(4).toString();

            String method_arr[] = method.split(",");
            String method_diff_arr[] = method_diff.split(",");

            String a = d8j.get(10).toString();
            String b = d8j.get(11).toString();
            String c = d8j.get(12).toString();
            String d = d8j.get(13).toString();
            int a1 = 0;
            int b1 = 0;
            int c1 = 0;
            int d1 = 0;

            if (!(a.equals(""))) {
                a1 = Integer.parseInt(a);
            } else if (!(b.equals(""))) {
                b1 = Integer.parseInt(b);
            } else if (!(c.equals(""))) {
                c1 = Integer.parseInt(c);
            } else if (!(d.equals(""))) {
                d1 = Integer.parseInt(d);
            }

            int old_same = method_arr.length;
            old_same = old_same - (a1 + b1);
            int old_diff = method_diff_arr.length;
            old_diff = old_diff - (c1 + d1);

            String x = "";
            String y = "";

            if (old_same == 0) {
                x = "";
            } else {
                x = old_same + "";
            }
            if (old_diff == 0) {
                y = "";
            } else {

                y = old_diff + "";
            }

            if (method_type.equals("Recursive")) {

                if (!(method.equals(""))) {
                    d8j.set(14, x);
                }
                if (!(method_diff.equals(""))) {
                    d8j.set(15, y);
                }
            } else {

                if (!(method.equals(""))) {
                    d8j.set(16, x);
                }
                if (!(method_diff.equals(""))) {
                    d8j.set(17, y);
                }

            }

        }

        for (int j = 0; j < List_data.size(); j++) {
            ArrayList d9j = List_data.get(j);
            String line = d9j.get(0).toString();
            String objname1 = d9j.get(3).toString();
            String operators[] = "+@-@*@/@%@=@!@>@<@,@.@)@(@;".split("@");
            if (!(objname1.equals(""))) {

                for (String globalee : global_variable) {

                    String globale[] = globalee.split("-");

                    String linearr[] = line.split(globale[0]);

                    if (linearr.length > 1 && (!line.contains("public")) && (!line.contains("void"))) {
                        for (int k = 0; k < linearr.length; k++) {
                            String check = linearr[k];
                            int np1 = 0;
                            int np2 = 0;

                            String check2[] = check.split("");
                            if (check.trim().equals("")) {
                                np1 = 1;

                            } else {
                                for (int i = check2.length - 1; i > 0; i--) {

                                    if (!(i < 1)) {

                                        for (String operator : operators) {

                                            if (check2[i].equals(" ") && check2[i - 1].equals(operator)) {
                                                np1 = 1;
                                            } else if (check2[i].equals(operator)) {
                                                np1 = 1;
                                            }
                                        }

                                    }
                                }
                            }

                            for (int i = 0; i < check2.length - 1; i++) {

                                for (String operator : operators) {

                                    if (check2[i].equals(" ") && check2[i + 1].equals(operator)) {
                                        np2 = 1;
                                    } else if (check2[i].equals(operator)) {
                                        np2 = 1;
                                    }

                                }
                            }

                            if (np1 == 1 && np2 == 1) {
                                k++;

                                String onclass = d9j.get(1).toString();

                                if (onclass.equals(globale[1])) {

                                    if (d9j.get(4).toString().equals("Recursive")) {

                                        if (d9j.get(19) == null) {
                                            d9j.set(19, globale[0]);

                                        } else {
                                            d9j.set(19, d9j.get(19) + "," + globale[0]);

                                        }
                                    } else {

                                        if (d9j.get(18) == null) {
                                            d9j.set(18, globale[0]);
                                        } else {
                                            d9j.set(18, d9j.get(18) + "," + globale[0]);
                                        }
                                    }

                                } else {

                                    if (d9j.get(4).toString().equals("Recursive")) {

                                        if (d9j.get(19) == null) {
                                            d9j.set(21, globale[0]);
                                        } else {
                                            d9j.set(19, d9j.get(21) + "," + globale[0]);
                                        }
                                    } else {

                                        if (d9j.get(18) == null) {
                                            d9j.set(20, globale[0]);
                                        } else {
                                            d9j.set(18, d9j.get(20) + "," + globale[0]);
                                        }
                                    }

                                }

                            }

                        }
                    }

                }
            }
        }

        Coupling_calculate();

    }

    public static void Coupling_calculate() {

        DefaultTableModel df3 = (DefaultTableModel) jTable3.getModel();
        df3.setRowCount(0);
        model.coupling Coupling = model.Create_properties.ReadCup("Coup.prof");

        int x2 = Coupling.getRM_call_RM_SF();
        int x3 = Coupling.getRM_call_RM_DF();
        int x4 = Coupling.getRM_RCM_SF();
        int x5 = Coupling.getRM_RCM_DF();
        int x6 = Coupling.getRCM_RCM_SF();
        int x7 = Coupling.getRCM_RCM_DF();
        int x8 = Coupling.getRCM_RM_SF();
        int x9 = Coupling.getRCM_RM_DF();
        int x10 = Coupling.getRM_R_GLV_SF();
        int x11 = Coupling.getRM_R_GLV_DF();
        int x12 = Coupling.getRCM_R_GLV_SF();
        int x13 = Coupling.getRCM_R_GLV_DF();
        int x1 = Coupling.getRecursive_cal();

        for (int i = 0; i < List_data.size(); i++) {
            ArrayList d = List_data.get(i);
            int total = 0;
            Vector v = new Vector();
            v.add(i + 1);
            v.add(d.get(0));

            if (d.get(4).equals("Recursive")) {

                String method_name = d.get(3).toString();

                String Calls[] = d.get(5).toString().split(",");
                int x = 0;
                for (String Call : Calls) {

                    Call = Call.replaceAll("[(]", "");
                    Call = Call.replaceAll("[)]", "");

                    if (Call.equals(method_name)) {
                        x++;
                    }

                }

                if (x == 0) {
                    v.add("");
                } else {
                    v.add(x);
                    total = total + (x * x1);
                }

            } else {
                v.add("");
            }
            if (d.get(16).toString().equals("")) {

                v.add("");
            } else {

                v.add(d.get(16).toString());
                total = total + (Integer.parseInt(d.get(16).toString()) * x2);
            }
            if (d.get(17).toString().equals("")) {

                v.add("");
            } else {
                v.add(d.get(17).toString());
                total = total + (Integer.parseInt(d.get(17).toString()) * x3);
            }
            if (d.get(10).toString().equals("")) {

                v.add("");
            } else {

                v.add(d.get(10));
                total = total + (Integer.parseInt(d.get(10).toString()) * x4);
            }
            if (d.get(12).toString().equals("")) {

                v.add("");
            } else {

                v.add(d.get(12));
                total = total + (Integer.parseInt(d.get(12).toString()) * x5);
            }
            if (d.get(11).toString().equals("")) {

                v.add("");
            } else {

                v.add(d.get(11));
                total = total + (Integer.parseInt(d.get(11).toString()) * x6);
            }
            if (d.get(13).toString().equals("")) {

                v.add("");
            } else {

                v.add(d.get(13));
                total = total + (Integer.parseInt(d.get(13).toString()) * x7);
            }
            if (d.get(14).toString().equals("")) {

                v.add("");
            } else {

                v.add(d.get(14));
                total = total + (Integer.parseInt(d.get(14).toString()) * x8);
            }
            if (d.get(15).toString().equals("")) {

                v.add("");
            } else {

                v.add(d.get(15));
                total = total + (Integer.parseInt(d.get(15).toString()) * x9);
            }
            if (d.get(18).toString().equals("")) {

                v.add("");
            } else {

                v.add(d.get(18).toString().split(",").length - 1);
                total = total + ((d.get(18).toString().split(",").length - 1) * x10);
            }
            if (d.get(20).toString().equals("")) {

                v.add("");
            } else {

                v.add(d.get(20).toString().split(",").length - 1);
                total = total + ((d.get(20).toString().split(",").length - 1) * x11);
            }
            if (d.get(19).toString().equals("")) {

                v.add("");
            } else {

                v.add(d.get(19).toString().split(",").length - 1);
                total = total + ((d.get(19).toString().split(",").length - 1) * x12);
            }
            if (d.get(21).toString().equals("")) {

                v.add("");
            } else {

                v.add(d.get(21).toString().split(",").length - 1);
                total = total + ((d.get(21).toString().split(",").length - 1) * x13);
            }

            v.add(total);
            df3.addRow(v);

        }
        total();
    }
    static DefaultTableModel df;

    public static void total() {

        df = (DefaultTableModel) jTable3.getModel();
        set();
        int Nr = 0;
        int Nmcms = 0;
        int Nmcmd = 0;
        int Nmcrms = 0;
        int Nmcrmd = 0;
        int Nrmcrms = 0;
        int Nrmcrmd = 0;
        int Nrmcms = 0;
        int Nrmcmd = 0;
        int Nmrgvs = 0;
        int Nrmgvd = 0;
        int Nrmgvs = 0;
        int Nrmrgcd = 0;
        int Ccp = 0;

        for (int i = 0; i < df.getRowCount(); i++) {
            if (!(df.getValueAt(i, 2).equals(""))) {

                Nr = Nr + Integer.parseInt(df.getValueAt(i, 2).toString());
            }
            if (!(df.getValueAt(i, 3).equals(""))) {
                Nmcms = Nmcms + Integer.parseInt(df.getValueAt(i, 3).toString());
            }
            if (!(df.getValueAt(i, 4).equals(""))) {
                Nmcmd = Nmcmd + Integer.parseInt(df.getValueAt(i, 4).toString());
            }
            if (!(df.getValueAt(i, 5).equals(""))) {
                Nmcrms = Nmcrms + Integer.parseInt(df.getValueAt(i, 5).toString());
            }
            if (!(df.getValueAt(i, 6).equals(""))) {
                Nmcrmd = Nmcrmd + Integer.parseInt(df.getValueAt(i, 6).toString());
            }
            if (!(df.getValueAt(i, 7).equals(""))) {
                Nrmcrms = Nrmcrms + Integer.parseInt(df.getValueAt(i, 7).toString());
            }
            if (!(df.getValueAt(i, 8).equals(""))) {
                Nrmcrmd = Nrmcrmd + Integer.parseInt(df.getValueAt(i, 8).toString());
            }
            if (!(df.getValueAt(i, 9).equals(""))) {
                Nrmcms = Nrmcms + Integer.parseInt(df.getValueAt(i, 9).toString());
            }
            if (!(df.getValueAt(i, 10).equals(""))) {
                Nrmcmd = Nrmcmd + Integer.parseInt(df.getValueAt(i, 10).toString());
            }
            if (!(df.getValueAt(i, 11).equals(""))) {
                Nmrgvs = Nmrgvs + Integer.parseInt(df.getValueAt(i, 11).toString());
            }
            if (!(df.getValueAt(i, 12).equals(""))) {
                Nrmgvd = Nrmgvd + Integer.parseInt(df.getValueAt(i, 12).toString());
            }
            if (!(df.getValueAt(i, 13).equals(""))) {
                Nrmgvs = Nrmgvs + Integer.parseInt(df.getValueAt(i, 13).toString());
            }
            if (!(df.getValueAt(i, 14).equals(""))) {
                Nrmrgcd = Nrmrgcd + Integer.parseInt(df.getValueAt(i, 14).toString());
            }
            if (!(df.getValueAt(i, 15).equals(""))) {
                Ccp = Ccp + Integer.parseInt(df.getValueAt(i, 15).toString());
            }

        }

        total.setText("Nr : " + Nr);
        total1.setText("Nmcms : " + Nmcms);
        total2.setText("Nmcmd : " + Nmcmd);
        total3.setText("Nmcrms : " + Nmcrms);
        total4.setText("Nmcrmd : " + Nmcrmd);
        total5.setText("Nrmcrms : " + Nrmcrms);
        total6.setText("Nrmcrmd : " + Nrmcrmd);
        total7.setText("Nrmcms : " + Nrmcms);
        total8.setText("Nrmcmd : " + Nrmcmd);
        total9.setText("Nmrgvs : " + Nmrgvs);
        total10.setText("Nrmgvd : " + Nrmgvd);
        total11.setText("Nrmgvs : " + Nrmgvs);
        total13.setText("Nrmrgcd : " + Nrmrgcd);
        total12.setText("Ccp : " + Ccp);

    }

    private static void set() {
        model.AllFactors.setToArray(df, 4);

    }
}
