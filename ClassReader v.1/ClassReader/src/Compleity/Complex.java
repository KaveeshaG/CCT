package Compleity;

import Weight_structre.Method_weight_dialog;
import Weight_structre.Size_weights;
import Weight_structre.Variable_weight;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import model.Size_weight;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author PK
 */
public class Complex extends javax.swing.JFrame {

    /**
     * Creates new form Complex
     */
    public Complex() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        total5 = new javax.swing.JLabel();
        total4 = new javax.swing.JLabel();
        total6 = new javax.swing.JLabel();
        total3 = new javax.swing.JLabel();
        total7 = new javax.swing.JLabel();
        total = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jtable2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        total10 = new javax.swing.JLabel();
        total9 = new javax.swing.JLabel();
        total8 = new javax.swing.JLabel();
        total1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        total13 = new javax.swing.JLabel();
        total11 = new javax.swing.JLabel();
        total2 = new javax.swing.JLabel();
        total12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTabbedPane1.setBackground(new java.awt.Color(0, 0, 0));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane1.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Line No", "Program Statements", "Nkw", "Nid", "Nop", "Nnv", "Nsl", "Cs"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(50);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(50);
            jTable1.getColumnModel().getColumn(2).setMinWidth(50);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(50);
            jTable1.getColumnModel().getColumn(3).setMinWidth(50);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(3).setMaxWidth(50);
            jTable1.getColumnModel().getColumn(4).setMinWidth(50);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(4).setMaxWidth(50);
            jTable1.getColumnModel().getColumn(5).setMinWidth(50);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(5).setMaxWidth(50);
            jTable1.getColumnModel().getColumn(6).setMinWidth(50);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(6).setMaxWidth(50);
            jTable1.getColumnModel().getColumn(7).setMinWidth(50);
            jTable1.getColumnModel().getColumn(7).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(7).setMaxWidth(50);
        }

        jButton2.setText("Weight Related To Size Factor");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel7.setBackground(new java.awt.Color(204, 204, 204));

        total5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total5.setForeground(new java.awt.Color(51, 51, 51));
        total5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total5.setText("   ");

        total4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total4.setForeground(new java.awt.Color(51, 51, 51));
        total4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total4.setText("   ");

        total6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total6.setForeground(new java.awt.Color(51, 51, 51));
        total6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total6.setText("   ");

        total3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total3.setForeground(new java.awt.Color(51, 51, 51));
        total3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total3.setText("   ");

        total7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total7.setForeground(new java.awt.Color(51, 51, 51));
        total7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total7.setText("   ");

        total.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total.setForeground(new java.awt.Color(51, 51, 51));
        total.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total.setText("   ");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(total6, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total5, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total7, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total4, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total3, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(total)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(total3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(total4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(total7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(total5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(total6)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1034, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                .addGap(14, 14, 14)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        jTabbedPane1.addTab("Size Complexity", jPanel2);

        jtable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Line No", "Program Statements", "Wmrt", "Npdtp", "Ncdtp", "Cm"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jtable2);
        if (jtable2.getColumnModel().getColumnCount() > 0) {
            jtable2.getColumnModel().getColumn(0).setMinWidth(50);
            jtable2.getColumnModel().getColumn(0).setPreferredWidth(50);
            jtable2.getColumnModel().getColumn(0).setMaxWidth(50);
            jtable2.getColumnModel().getColumn(2).setMinWidth(50);
            jtable2.getColumnModel().getColumn(2).setPreferredWidth(50);
            jtable2.getColumnModel().getColumn(2).setMaxWidth(50);
            jtable2.getColumnModel().getColumn(3).setMinWidth(50);
            jtable2.getColumnModel().getColumn(3).setPreferredWidth(50);
            jtable2.getColumnModel().getColumn(3).setMaxWidth(50);
            jtable2.getColumnModel().getColumn(4).setMinWidth(50);
            jtable2.getColumnModel().getColumn(4).setPreferredWidth(50);
            jtable2.getColumnModel().getColumn(4).setMaxWidth(50);
            jtable2.getColumnModel().getColumn(5).setMinWidth(50);
            jtable2.getColumnModel().getColumn(5).setPreferredWidth(50);
            jtable2.getColumnModel().getColumn(5).setMaxWidth(50);
        }

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setText("Weight Related To variable Factor");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel8.setBackground(new java.awt.Color(204, 204, 204));

        total10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total10.setForeground(new java.awt.Color(51, 51, 51));
        total10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total10.setText("   ");

        total9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total9.setForeground(new java.awt.Color(51, 51, 51));
        total9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total9.setText("   ");

        total8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total8.setForeground(new java.awt.Color(51, 51, 51));
        total8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total8.setText("   ");

        total1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total1.setForeground(new java.awt.Color(51, 51, 51));
        total1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total1.setText("   ");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(total10, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total9, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total8, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total1, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(total1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(total8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(total9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(total10)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jButton4.setText("jButton4");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1054, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Variable Complexity", jPanel3);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Line No", "Program Statements", "Wmrt", "Npdtp", "Ncdtp", "Cm"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setMinWidth(50);
            jTable3.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable3.getColumnModel().getColumn(0).setMaxWidth(50);
            jTable3.getColumnModel().getColumn(2).setMinWidth(50);
            jTable3.getColumnModel().getColumn(2).setPreferredWidth(50);
            jTable3.getColumnModel().getColumn(2).setMaxWidth(50);
            jTable3.getColumnModel().getColumn(3).setMinWidth(50);
            jTable3.getColumnModel().getColumn(3).setPreferredWidth(50);
            jTable3.getColumnModel().getColumn(3).setMaxWidth(50);
            jTable3.getColumnModel().getColumn(4).setMinWidth(50);
            jTable3.getColumnModel().getColumn(4).setPreferredWidth(50);
            jTable3.getColumnModel().getColumn(4).setMaxWidth(50);
            jTable3.getColumnModel().getColumn(5).setMinWidth(50);
            jTable3.getColumnModel().getColumn(5).setPreferredWidth(50);
            jTable3.getColumnModel().getColumn(5).setMaxWidth(5);
        }

        jButton3.setText("Weight related To method factor");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel9.setBackground(new java.awt.Color(204, 204, 204));

        total13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total13.setForeground(new java.awt.Color(51, 51, 51));
        total13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total13.setText("   ");

        total11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total11.setForeground(new java.awt.Color(51, 51, 51));
        total11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total11.setText("   ");

        total2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total2.setForeground(new java.awt.Color(51, 51, 51));
        total2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total2.setText("   ");

        total12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total12.setForeground(new java.awt.Color(51, 51, 51));
        total12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total12.setText("   ");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(total2, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total13, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total12, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total11, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(total2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(total11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(total12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(total13)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1054, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(123, 123, 123))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Methods Complexity", jPanel4);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Variable_weight v = new Variable_weight(this, true);
        v.setVisible(true);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        Size_weights w = new Size_weights(this, true);
        w.setVisible(true);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        Method_weight_dialog md = new Method_weight_dialog(this, true);
        md.setVisible(true);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        set();

    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Complex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Complex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Complex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Complex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Complex().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private static javax.swing.JTabbedPane jTabbedPane1;
    public static javax.swing.JTable jTable1;
    public static javax.swing.JTable jTable3;
    public static javax.swing.JTable jtable2;
    public static javax.swing.JLabel total;
    public static javax.swing.JLabel total1;
    public static javax.swing.JLabel total10;
    public static javax.swing.JLabel total11;
    public static javax.swing.JLabel total12;
    public static javax.swing.JLabel total13;
    public static javax.swing.JLabel total2;
    public static javax.swing.JLabel total3;
    public static javax.swing.JLabel total4;
    public static javax.swing.JLabel total5;
    public static javax.swing.JLabel total6;
    public static javax.swing.JLabel total7;
    public static javax.swing.JLabel total8;
    public static javax.swing.JLabel total9;
    // End of variables declaration//GEN-END:variables
   static DefaultTableModel df_variable;
    static DefaultTableModel df_size;
    static DefaultTableModel df_method;

    public void calculateVaribaleComplexity(String code) {
        df_variable = (DefaultTableModel) jtable2.getModel();
        jTabbedPane1.setSelectedIndex(1);
        String Datatypes[] = {"byte", "short", "int", "long", "float", "double", "boolean", "char", "String"};
        model.Variable_weight vw = model.Create_properties.ReadFileV("Variable.prof");
        int Globle_v = vw.getGloble_V();
        int Local_v = vw.getLocal_v();
        int Primary_DT_V = vw.getPrimitive_V();
        int Composite_DT_V = vw.getComposite_V();
        String[] line = code.split("\\n");
        df_variable.setRowCount(0);
        int scope = 0;
        String class_name = "";
        String v_name = "";
        int cnt = 0;
        for (String line1 : line) {
            if (!line1.trim().equals("")) {
                String code_line = replaceWithPattern(line1.trim(), " ");
                int Wvs = 0;
                int Npdtv = 0;
                int Ncdtv = 0;
                String[] word_of_line = code_line.split(" ");
                if (code_line.contains("class")) {

                    calss_name:
                    for (int i = 0; i < word_of_line.length; i++) {

                        if (word_of_line[i] == "class") {
                            class_name = word_of_line[++i];
                            break calss_name;
                        }

                    }
                }
                if (code_line.contains("{")) {
                    scope++;

                }
                if (code_line.contains("}")) {
                    scope--;
                }
                if ((code_line.contains("public ") || code_line.contains("private ") || code_line.contains("protected ") || code_line.contains("class ")) && code_line.contains("{")) {

                } else {
                    for (int i = 0; i < word_of_line.length; i++) {

                        for (String ByDataType : Datatypes) {

                            if (word_of_line[i].equals(ByDataType)) {

                                String variable_name = "";

                                String li[] = code_line.split("");

                                String newline[] = code_line.split(ByDataType);

                                String variablle[] = newline[1].split("");

                                int type = 0;
                                for (int ia = 0; ia < variablle.length; ia++) {

                                    if (variablle[ia].equals(";") || variablle[ia].equals("=")) {
                                        break;
                                    } else if (variablle[ia].equals("<") || variablle[ia].equals("[") || variablle[ia].equals(">") || variablle[ia].equals("]")) {
                                        type++;
                                    } else {
                                        variable_name = variable_name + variablle[ia];
                                    }
                                }

                                variable_name = variable_name.replaceAll(" ", "");

                                if (variable_name.equals("")) {

                                } else {

                                    if (variable_name.contains(",")) {
                                        String name[] = variable_name.split(",");

                                        if (type == 0) {

                                            Npdtv = Npdtv + name.length;
                                        } else {
                                            Ncdtv = Ncdtv + name.length;
                                        }

                                    } else {
                                        if (type == 0) {

                                            Npdtv++;

                                        } else {
                                            Ncdtv++;
                                        }
                                    }
                                    if (scope == 1) {
                                        Wvs = Globle_v;

                                    } else if (scope == 2) {
                                        Wvs = Local_v;

                                    }

                                }

                            }

                        }
                        if (word_of_line[i].equals("Object")
                                || word_of_line[i].equals(class_name)
                                || word_of_line[i].equals("Dimension")
                                || word_of_line[i].equals("ArrayList")
                                || word_of_line[i].equals("Map")
                                || word_of_line[i].equals("HashMap")) {
                            Ncdtv++;
                            if (scope == 1) {
                                Wvs = Globle_v;

                            } else if (scope == 2) {
                                Wvs = Local_v;

                            }
                        }

                    }

                }
                Vector v = new Vector();
                v.add(cnt++);
                v.add(code_line);

                if (Wvs == 0) {

                    v.add("");
                    v.add("");
                    v.add("");
                    v.add("0");
                } else {
                    v.add(Wvs);
                    v.add(Npdtv);
                    v.add(Ncdtv);
                    v.add(Wvs * ((Primary_DT_V * Npdtv) + (Composite_DT_V * Ncdtv)));
                }

                df_variable.addRow(v);

            }

        }
        total2();
    }

    static public String replaceWithPattern(String str, String replace) {

        Pattern ptn = Pattern.compile("\\s+");
        Matcher mtch = ptn.matcher(str);
        return mtch.replaceAll(replace);
    }

    public static void Size_of_code(String code) {

        String keywords[] = {"abstract", ""
            + "assert", ""
            + "break", ""
            + "class", ""
            + "continue", ""
            + "const", ""
            + "default", ""
            + "enum", ""
            + "exports", ""
            + "extends", ""
            + "final", ""
            + "finally", ""
            + "implements", ""
            + "import", ""
            + "instanceof", ""
            + "interface", ""
            + "module", ""
            + "native", ""
            + "else", ""
            + "new ", ""
            + "package", ""
            + "private", ""
            + "protected", ""
            + "public", ""
            + "requires", ""
            + "return", ""
            + "static", ""
            + "strictfp", ""
            + "super", ""
            + "synchronized", ""
            + "this", ""
            + "transient", ""
            + "void", ""
            + "volatile", ""
            + "equals"};
        df_size = (DefaultTableModel) jTable1.getModel();
        df_size.setRowCount(0);

        String s[] = code.split("\\n");

        int no = 0;

        String[] Filter_keywords = {"if",
            "for",
            "while",
            "switch",
            "case",
            "abstract",
            "assert",
            "break",
            "class",
            "continue",
            "const",
            "default",
            "enum",
            "exports",
            "extends",
            "final",
            "finally",
            "implements",
            "import",
            "instanceof",
            "interface",
            "module",
            "native",
            "else",
            "new ",
            "package",
            "private",
            "protected",
            "public",
            "requires",
            "return",
            "static",
            "strictfp",
            "super",
            "synchronized",
            "this",
            "transient",
            "void",
            "volatile",
            "equals",
            "byte",
            "short",
            "int",
            "long",
            "float",
            "double",
            "boolean",
            "char",
            "String",
            "Object",
            "Dimension"};

        String[] Data_types_primitive = {"byte[]",
            "short[]",
            "int[]",
            "long[]",
            "float[]",
            "double[]",
            "boolean[]",
            "char[]",
            "String[]",
            "Object[]",
            "byte",
            "short",
            "int",
            "long",
            "float",
            "double",
            "boolean",
            "char",
            "String",
            "Object",
            "Dimension"};
        String[] modifiers = {"public",
            "private",
            "protected"};

        ArrayList<String> class_names = new ArrayList<>();
        ArrayList<String> method_names = new ArrayList<>();
        int scope_count = 0;

        for (String In_row : s) {

            String original_line = In_row;

           

                String comnt_remove[] = In_row.split("");
                String new_line = "";
                int dublecode = 0;
                for (int i = 0; i < comnt_remove.length; i++) {

                    if (comnt_remove[i].equals("/") && comnt_remove[i + 1].equals("/")) {
                        break;
                    } else if (comnt_remove[i].equals("\"")) {
                        dublecode++;
                    } else if (dublecode % 2 == 0) {
                        new_line = new_line + comnt_remove[i];
                    }

                }
                In_row = new_line;
               
            

            if (!(In_row.trim().isEmpty())) {
                no++;

                if (In_row.split(" ")[0].equals("import")) {

                    Vector v = new Vector();
                    v.add(no);
                    v.add(original_line);
                    v.add("");
                    v.add("");
                    v.add("");
                    v.add("");
                    v.add("");
                    v.add("");
                    df_size.addRow(v);

                } else {

                    int Nkw = 0;
                    int Nid = 0;
                    int Nop = 0;
                    int Nnv = 0;
                    int Nsl = 0;

                    for (String keyword : keywords) {
                        if (In_row.contains(keyword)) {
                            Nkw++;
                        }
                    }
                    int classs = 0;
                    int methodos = 0;
                    String class_name = "";
                    String method_name = "";

                    if (In_row.contains("{")) {
                        scope_count++;
                    }
                    if (In_row.contains("}")) {
                        scope_count--;

                    }

                    String class_lines[] = In_row.split(" ");

                    for (int i = 0; i < class_lines.length; i++) {

                        if (class_lines[i].equals("class")) {

                            classs++;

                            if (In_row.contains("implements")) {

                                String first[] = In_row.split("implements")[1].split(",");
                                Nid = Nid + first.length;
                            }

                            if (In_row.contains("extends")) {

                                String first[] = In_row.split("extends")[0].split("");
                                int space = 0;

                                for (int j = first.length - 1; j > 0; j--) {

                                    if (space == 1 && (first[j].equals(" "))) {
                                        break;
                                    } else if (!(first[j].equals(" "))) {
                                        space = 1;
                                        class_name = first[j] + class_name;
                                    }

                                }
                                Nid++;
                                class_names.add(class_name);

                                Nid = Nid + In_row.split("[.]").length;

                                break;
                            } else {
                                String first[] = In_row.split("[{]")[0].split("");
                                int space = 0;

                                for (int j = first.length - 1; j > 0; j--) {

                                    if (space == 1 && (first[j].equals(" "))) {
                                        break;
                                    } else if (!(first[j].equals(" "))) {
                                        space = 1;
                                        class_name = first[j] + class_name;
                                    }

                                }

                                if (class_name.equals("")) {

                                } else {
                                    Nid++;
                                    class_names.add(class_name);
                                }
                                break;
                            }

                        }
                    }
                    if (classs == 0) {

                        for (String method : modifiers) {

                            if (In_row.contains(method) && In_row.contains("(")) {

                                methodos++;
                                String first[] = In_row.split("[(]")[0].split("");
                                int space = 0;

                                for (int i = first.length - 1; i > 0; i--) {

                                    if (space == 1 && (first[i].equals(" "))) {
                                        break;
                                    } else if (!(first[i].equals(" "))) {
                                        space = 1;
                                        method_name = first[i] + method_name;
                                    }

                                }
                                if (method_name.equals("")) {

                                } else {
                                    Nid++;
                                    method_names.add(method_name);
                                }

                            }
                        }
                    }

                    if (classs == 0 && methodos == 0) {

                        String li[] = In_row.split("");

                        String word = "";

                        String variable_name = "";
                        Map<String, String> variables_local = new HashMap<String, String>();
                        for (String Pri_dta_typ : Data_types_primitive) {

                            if (In_row.contains(Pri_dta_typ + " ")) {

                                if (scope_count < 3) {

                                    String newline[] = In_row.split(Pri_dta_typ);
                                    String variablle[] = newline[1].split("");

                                    for (int ia = 0; ia < variablle.length; ia++) {

                                        if (variablle[ia].equals(";") || variablle[ia].equals("=")) {
                                            break;
                                        } else {

                                            variable_name = variable_name + variablle[ia];

                                        }
                                    }

                                    variable_name = variable_name.replaceAll(" ", "");

                                    if (variable_name.equals("")) {

                                    } else {

                                        if (variable_name.contains(",")) {
                                            String name[] = variable_name.split(",");
                                            for (int is = 0; is < name.length; is++) {

                                                variables_local.put(name[is], "");

                                            }
                                        } else {
                                            variables_local.put(variable_name, "");

                                        }

                                    }
                                }
                            }
                        }

                        Nid = Nid - variables_local.size();

                        for (int i = 0; i < li.length; i++) {
                            char c = li[i].toString().charAt(0);
                            if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {

                                word = word + li[i];
                            } else {

                                for (String error_word : Filter_keywords) {

                                    if (error_word.equals(word)) {
                                        word = "";
                                    }
                                }

                                if (word.equals("")) {

                                } else {
                                    Nid++;

                                    word = "";

                                }

                            }
                        }

                    }

                    String character[] = In_row.split("");
                    String operators[] = {"+",
                        "-",
                        "*",
                        "/",
                        "%",
                        "++",
                        "--",
                        "=",
                        "+=",
                        "-=",
                        "*=",
                        "/=",
                        "%=",
                        "&=",
                        "|=",
                        "^=",
                        "==",
                        "!=",
                        ">",
                        "<",
                        ">=",
                        "<=",
                        "&&",
                        "||",
                        "!",
                        "^",
                        "~",
                        "<<",
                        ">>",
                        ",",
                        "_>",
                        ".",
                        "::"};
                    for (int i = 0; i < character.length; i++) {

                        int count = 0;
                        int kl = 0;
                        String two = "";
                        String one = character[i];

                        if (i + 1 < character.length) {
                            two = character[i] + "" + character[i + 1];
                            for (String oprtr : operators) {
                                if (two.equals(oprtr)) {

                                    Nop++;
                                    kl++;
                                    i++;
                                    break;
                                }
                            }
                        }

                        if (kl == 0) {
                            for (String oprtr : operators) {
                                if (one.equals(oprtr)) {
                                    Nop++;
                                    kl++;
                                }
                            }

                        }

                    }

                    Pattern p = Pattern.compile("\\d+");
                    Matcher m = p.matcher(In_row);
                    while (m.find()) {
                        Nnv++;
                    }

                    for (String doublequote : original_line.split("")) {

                        if (doublequote.equals("\"")) {

                            Nsl++;
                        }
                    }
                    if (!(Nsl == 0)) {

                        Nsl = Nsl / 2;
                    }

                    Vector v = new Vector();
                    v.add(no);
                    v.add(original_line);
                    if (!(Nkw == 0)) {
                        v.add(Nkw);
                    } else {
                        v.add("");
                    }

                    if (!(Nid == 0)) {
                        v.add(Nid);
                    } else {
                        v.add("");
                    }
                    if (!(Nop == 0)) {
                        v.add(Nop);
                    } else {
                        v.add("");
                    }
                    if (!(Nnv == 0)) {
                        v.add(Nnv);
                    } else {
                        v.add("");
                    }
                    if (!(Nsl == 0)) {
                        v.add(Nsl);
                    } else {
                        v.add("");
                    }
                    df_size.addRow(v);
                }

            }

        }
        Size_weight siz = model.Create_properties.ReadSize("Size.prof");
        int kew = siz.getKeyword();
        int ide = siz.getIdentifier();
        int opr = siz.getOperator();
        int num = siz.getNumericle_V();
        int sl = siz.getSting_lttrl();

        for (int i = 0; i < df_size.getRowCount(); i++) {

            int x = 0;
            if (!(df_size.getValueAt(i, 2).equals(""))) {
                x = x + (Integer.parseInt(df_size.getValueAt(i, 2).toString()) * kew);
            }
            if (!(df_size.getValueAt(i, 3).equals(""))) {
                x = x + (Integer.parseInt(df_size.getValueAt(i, 3).toString()) * ide);
            }
            if (!(df_size.getValueAt(i, 4).equals(""))) {
                x = x + (Integer.parseInt(df_size.getValueAt(i, 4).toString()) * opr);
            }
            if (!(df_size.getValueAt(i, 5).equals(""))) {
                x = x + (Integer.parseInt(df_size.getValueAt(i, 5).toString()) * num);
            }
            if (!(df_size.getValueAt(i, 6).equals(""))) {
                x = x + (Integer.parseInt(df_size.getValueAt(i, 6).toString()) * sl);
            }

            df_size.setValueAt(x, i, 7);
        }

        jTabbedPane1.setSelectedIndex(0);
        total1();
      

    }

    public static void method_complexity(String code) {
        df_method = (DefaultTableModel) jTable3.getModel();
        df_method.setRowCount(0);

        String[] Data_types = {"byte",
            "short",
            "int",
            "long",
            "float",
            "double",
            "boolean",
            "char"};
        String[] Modifiers = {"public",
            "private",
            "protected"};

        String s[] = code.split("\\n");
        String classname = "nlg pig";
        int no = 0;

//        mwthod  weight load from properties file
        model.Method m = model.Create_properties.ReadMehtod("Method.prof");
        int x1 = m.getM_Primitive_RT();
        int x2 = m.getM_composite_TR();
        int x3 = m.getM_void_RP();
        int x4 = m.getM_DataType_PM();
        int x5 = m.getM_composite_PM();

        for (String line : s) {
            if (!(line.trim().equals(""))) {
                no++;
                line = line.replaceAll("[(]", " ( ");
                line = line.replaceAll("[)]", " ) ");
                line = line.replaceAll("  ", " ");

                int Wmrt = 0;
                int Ncdtp = 0;
                int Npdtp = 0;

                if (line.contains("class ")) {

                    String word[] = line.split(" ");

                    for (int i = 0; i < word.length; i++) {
                        if (word[i].equals("class")) {

                            classname = word[i + 1];
                        }
                    }

                } else {

                    for (String method : Modifiers) {

                        if (line.contains(method) && line.contains("(")) {

                            String word[] = line.split(" ");
                            String param = "";
                            int jk = 0;
                            int scope = 0;
                            for (int i = 0; i < word.length; i++) {

                                if (line.contains(" void ")) {
                                    Wmrt = x3;
                                } else {
                                    if (word[i].equals("public") || word[i].equals("private") || word[i].equals("protected")) {

                                        if (word[i + 1].equals("static")) {

                                            if (word[i + 2].contains("<") && word[i + 2].contains(">")) {
                                                Wmrt = x2;
                                            } else if (word[i + 2].contains("[") && word[i + 2].contains("]")) {
                                                Wmrt = x2;
                                            } else if (word[i + 2].equals(classname)) {
                                                Wmrt = x2;
                                            } else if (word[i + 2].equals("Object")) {
                                                Wmrt = x2;
                                            } else if (word[i + 2].equals("String")) {
                                                Wmrt = x2;

                                            }
                                            if (Wmrt < x2) {

                                                for (String data_type : Data_types) {
                                                    if (word[i + 2].equals(data_type)) {
                                                        Wmrt = x1;
                                                    }
                                                }
                                            }

                                        } else {

                                            if (word[i + 1].contains("<") && word[i + 2].contains(">")) {
                                                Wmrt = x2;
                                            } else if (word[i + 1].contains("[") && word[i + 2].contains("]")) {
                                                Wmrt = x2;
                                            } else if (word[i + 1].equals(classname)) {
                                                Wmrt = x2;
                                            } else if (word[i + 1].equals("Object")) {
                                                Wmrt = x2;

                                            } else if (word[i + 1].equals("String")) {
                                                Wmrt = x2;

                                            }
                                            if (Wmrt < x2) {

                                                for (String data_type : Data_types) {
                                                    if (word[i + 1].equals(data_type)) {
                                                        Wmrt = x1;
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }

                                if (word[i].equals(")")) {

                                    String parameter[] = param.split(",");

                                    for (String para : parameter) {

                                        if (para.contains("<")) {
                                            Ncdtp++;
                                        } else if (para.contains("[")) {
                                            Ncdtp++;
                                        } else if (para.contains(classname + " ")) {
                                            Ncdtp++;
                                        } else if (para.contains("Object ")) {
                                            Ncdtp++;
                                        } else if (para.contains("String")) {
                                            Ncdtp++;

                                        } else {

                                            for (String data_type : Data_types) {

                                                if (para.contains(data_type + " ")) {
                                                    Npdtp++;
                                                    break;
                                                }

                                            }

                                            if (para.trim().equals("") || Npdtp > 0) {

                                            } else {
                                                Ncdtp++;

                                            }

                                        }

                                    }

                                }

                                if (jk == 1) {
                                    param = param + word[i] + " ";
                                }

                                if (word[i].equals("(")) {
                                    jk = 1;
                                }

                            }

                        }
                    }
                }

                Vector v = new Vector();
                v.add(no);
                v.add(line);

                if (Wmrt == 0 && Npdtp == 0 & Ncdtp == 0) {
                    v.add("");
                    v.add("");
                    v.add("");
                    v.add("0");

                } else {
                    v.add(Wmrt);
                    v.add(Npdtp);
                    v.add(Ncdtp);
                    v.add(Wmrt + (x4 * Npdtp) + (x5 * Ncdtp));
                }
                df_method.addRow(v);

            }
        }

        jTabbedPane1.setSelectedIndex(2);
        total3();

    }

    public static void total3() {

        DefaultTableModel df = (DefaultTableModel) jTable3.getModel();
        int Wmrt = 0;
        int Npdtp = 0;
        int Ncdtp = 0;
        int Cm = 0;

        for (int i = 0; i < df.getRowCount(); i++) {
            if (!(df.getValueAt(i, 2).equals(""))) {

                Wmrt = Wmrt + Integer.parseInt(df.getValueAt(i, 2).toString());
            }
            if (!(df.getValueAt(i, 3).equals(""))) {

                Npdtp = Npdtp + Integer.parseInt(df.getValueAt(i, 3).toString());
            }
            if (!(df.getValueAt(i, 4).equals(""))) {

                Ncdtp = Ncdtp + Integer.parseInt(df.getValueAt(i, 4).toString());
            }
            if (!(df.getValueAt(i, 5).equals(""))) {

                Cm = Cm + Integer.parseInt(df.getValueAt(i, 5).toString());
            }
        }

        total1.setText("   Wmrt : " + Wmrt);
        total11.setText("   Npdtp : " + Npdtp);
        total12.setText("   Ncdtp : " + Ncdtp);
        total13.setText("   Cm : " + Cm);
    }

    public static void total2() {

        DefaultTableModel df = (DefaultTableModel) jtable2.getModel();
        int Wvs = 0;
        int Npdtv = 0;
        int Ncdtv = 0;
        int Cv = 0;

        for (int i = 0; i < df.getRowCount(); i++) {
            if (!(df.getValueAt(i, 2).equals(""))) {

                Wvs = Wvs + Integer.parseInt(df.getValueAt(i, 2).toString());
            }
            if (!(df.getValueAt(i, 3).equals(""))) {

                Npdtv = Npdtv + Integer.parseInt(df.getValueAt(i, 3).toString());
            }
            if (!(df.getValueAt(i, 4).equals(""))) {

                Ncdtv = Ncdtv + Integer.parseInt(df.getValueAt(i, 4).toString());
            }
            if (!(df.getValueAt(i, 5).equals(""))) {

                Cv = Cv + Integer.parseInt(df.getValueAt(i, 5).toString());
            }
        }

        total.setText("   Wvs : " + Wvs);
        total8.setText("   Npdtv : " + Npdtv);
        total9.setText("   Ncdtv : " + Ncdtv);
        total1.setText("   Cv : " + Cv);
    }

    public static void total1() {

        DefaultTableModel df = (DefaultTableModel) jTable1.getModel();
        int Nkw = 0;
        int Nid = 0;
        int Nop = 0;
        int Nnv = 0;
        int Nsl = 0;
        int Cs = 0;

        for (int i = 0; i < df.getRowCount(); i++) {
            if (!(df.getValueAt(i, 2).equals(""))) {

                Nkw = Nkw + Integer.parseInt(df.getValueAt(i, 2).toString());
            }
            if (!(df.getValueAt(i, 3).equals(""))) {

                Nid = Nid + Integer.parseInt(df.getValueAt(i, 3).toString());
            }
            if (!(df.getValueAt(i, 4).equals(""))) {

                Nop = Nop + Integer.parseInt(df.getValueAt(i, 4).toString());
            }
            if (!(df.getValueAt(i, 5).equals(""))) {

                Nnv = Nnv + Integer.parseInt(df.getValueAt(i, 5).toString());
            }
            if (!(df.getValueAt(i, 6).equals(""))) {

                Nsl = Nsl + Integer.parseInt(df.getValueAt(i, 6).toString());
            }
            if (!(df.getValueAt(i, 7).equals(""))) {

                Cs = Cs + Integer.parseInt(df.getValueAt(i, 7).toString());
            }
        }

        total.setText("Total  Nkw : " + Nkw);
        total3.setText("Total   Nid : " + Nid);
        total4.setText("Total   Nop : " + Nop);
        total5.setText("Total   Nnv : " + Nnv);
        total6.setText("Total   Nsl : " + Nsl);
        total7.setText("Total   Cs : " + Cs);
    }

    public static void set() {
        model.AllFactors.setToArray(df_size, 1);
        model.AllFactors.setToArray(df_variable, 2);
        model.AllFactors.setToArray(df_method, 3);
    }

}
